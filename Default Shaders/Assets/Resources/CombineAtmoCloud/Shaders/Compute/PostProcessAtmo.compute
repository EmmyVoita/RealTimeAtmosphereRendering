#include "UnityCG.cginc"
#include "Assets/Resources/CombineAtmoCloud/Includes/RayMarch.cginc"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PostProcessAtmo


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// Texture:
RWTexture2D<float4> _MainTex;
RWTexture2D<float4> History;
RWTexture2D<float4> Result;

Texture2D<float4> WorldPosition;
SamplerState sampler_WorldPosition;


float4x4 _PrevVP_NoFlip;
float4x4 _CurrVP_NoFlip;
float4x4 _ViewProjInv;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float3 _CameraPosition;
float4x4 _PreviousProjection;
float4x4 _PreviousRotation;
float4x4 _PreviousInverseRotation;
float4x4 _Projection;
float4x4 _InverseProjection;
float4x4 _Rotation;
float4x4 _InverseRotation;


//float4x4  oldViewProjectionMatrix;
//float4x4  newViewProjectionMatrix;

float nearPlane;
float farPlane;

// Define the offsets
static const int2 offsets[8] = {
    int2(-1, -1), int2(-1, 1),
    int2(1, -1), int2(1, 1),
    int2(1, 0), int2(0, -1),
    int2(0, 1), int2(-1, 0)
};


//-------------------------------------------------------------------------------------
// Gaussian Blur
//-------------------------------------------------------------------------------------


static const float kernel[9] =
{
	.0625, .125, .0625,
    .125,  .25,  .125,
    .0625, .125, .0625  
};

float SobelEdgeDetectionDepth(RWTexture2D<float4> depthTex, int2 uv) {
    float Gx[3][3] = {
        {-1, 0, 1},
        {-2, 0, 2},
        {-1, 0, 1}
    };

    float Gy[3][3] = {
        {-1, -2, -1},
        { 0,  0,  0},
        { 1,  2,  1}
    };

    float edgeX = 0.0;
    float edgeY = 0.0;

    for (int i = -1; i <= 1; ++i) {
        for (int j = -1; j <= 1; ++j) {
            float depth = depthTex[uv + int2(i, j)].a;
            edgeX += Gx[i + 1][j + 1] * depth;
            edgeY += Gy[i + 1][j + 1] * depth;
        }
    }

    return sqrt(edgeX * edgeX + edgeY * edgeY);
}



float4 GaussianBlur(int2 uv)
{
    float4 col = float4(0., 0., 0., 0.);

    int2 offsets[9] = { 
        int2(-1, -1), int2(-1, 0), int2(-1, 1),
        int2(0, -1), int2(0, 0), int2(0, 1),
        int2(1, -1), int2(1, 0), int2(1, 1)
    };

    for (int i = 0; i < 9; i++)
    {
        col += float4(Result[uv + offsets[i]].rgb,1.) * kernel[i];
    }

    return col;
}

bool IsDepthSimilar(float currentDepth, float historyDepth, float threshold) {
    return abs(currentDepth - historyDepth) < threshold;
}



// Linearizes a Z buffer value
float CalcLinearZ(float depth) 
{
    // bias it from [0, 1] to [-1, 1]
    float lin = nearPlane / (farPlane - depth * (farPlane - nearPlane)) * farPlane;
    return (lin * 2.0) - 1.0;
}

float DenormalizeDepth(float normalizedDepth)
{
    return normalizedDepth * (farPlane - nearPlane) + nearPlane;
}


float3 DenormalizeDepthToWorldPosition(float2 uv, float normalizedDepth)
{
    Ray ray = CreateCameraRay(uv, _CameraToWorld, _CameraInverseProjection);
    float3 worldPos = ray.origin + ray.direction * DenormalizeDepth(normalizedDepth);
    return worldPos;
}

uint2 GetReprojectionUV(float3 worldPosition, float width, float height)
{
    // Determine the ss_uv for the world position in the previous frame using the previous VP matrix, this assumes the object doesnt move:
    float4 reproject_cs_pos = mul(_PrevVP_NoFlip, float4(worldPosition, 1.0));
    float2 reproject_ss_ndc = reproject_cs_pos.xy / reproject_cs_pos.w;
    float2 reproject_ss_uv = 0.5 * reproject_ss_ndc + 0.5;

    // Convert uv to ss_id to use for thread_id:
    uint2 reproject_thread_id = uint2(round(reproject_ss_uv * float2(width, height)));
    return reproject_thread_id;
}

float4 Calctxaa(uint2 hist_id, uint2 id, float4 currentBuffer) {
    // Get the color from the history buffer
    float4 historyBuffer = float4(History[hist_id].rgb, 1.);
    currentBuffer.a = 1.;

    // Initialize average and variance with the current color
    float4 colorAvg = currentBuffer;
    float4 colorVar = currentBuffer * currentBuffer;

    // Compute neighborhood average and variance
    for (int i = 0; i < 8; i++) {
        float4 neighborTexel = _MainTex[id.xy + offsets[i]];
        colorAvg += neighborTexel;
        colorVar += neighborTexel * neighborTexel;
    }
    colorAvg /= 9.0;
    colorVar /= 9.0;

    float gColorBoxSigma = 0.75;
    float4 sigma = sqrt(max(float4(0, 0, 0, 0), colorVar - colorAvg * colorAvg));
    float4 colorMin = colorAvg - gColorBoxSigma * sigma;
    float4 colorMax = colorAvg + gColorBoxSigma * sigma;

    // Clamp the history buffer value to the calculated range
    historyBuffer = clamp(historyBuffer, colorMin, colorMax);

    // Blend current and clamped history colors
    float4 txaa = lerp(currentBuffer, historyBuffer, 0.95);
    return txaa;
}

float4 clip_aabb(float3 aabb_min, float3 aabb_max, float4 p, float4 q)
{
    float3 p_clip = 0.5 * (aabb_max + aabb_min);
    float3 e_clip = 0.5 * (aabb_max - aabb_min);
    float4 v_clip = q - float4(p_clip, p.w);
    float3 v_unit = v_clip.xyz / e_clip;
    float3 a_unit = abs(v_unit);
    float ma_unit = max(max(a_unit.x, a_unit.y), a_unit.z);
    
    if (ma_unit > 1.0)
        return float4(p_clip, p.w) + v_clip / ma_unit;
    else
        return q; // point inside AABB
}

float4 Calctxaa2(uint2 hist_id, uint2 id, float4 currentBuffer) {
    // Get the color from the history buffer
    float4 historyBuffer = float4(History[hist_id].rgb, 1.);
    
    float currentDepth = currentBuffer.a;
    float historyDepth = History[hist_id].a;

    currentBuffer.a = 1.;

    // Depth rejection
    if (!IsDepthSimilar(currentDepth, historyDepth, 0.01)) {
        historyBuffer = currentBuffer;
    }

    /*
    // Initialize average and variance with the current color
    float4 colorAvg = currentBuffer;
    float4 colorVar = currentBuffer * currentBuffer;

    // Compute neighborhood average and variance
    for (int i = 0; i < 8; i++) {
        float4 neighborTexel = _MainTex[id.xy + offsets[i]];
        colorAvg += neighborTexel;
        colorVar += neighborTexel * neighborTexel;
    }
    colorAvg /= 9.0;
    colorVar /= 9.0;

    // Compute the standard deviation (sigma)
    // Edge detection
    float edgeStrength = SobelEdgeDetectionDepth(_MainTex, id.xy);
    float edgeThreshold = 0.1; // Adjust threshold as needed

    // Compute the standard deviation (sigma)
    //
    float gColorBoxSigma = lerp(0.75, 1.5, saturate(edgeStrength / edgeThreshold)); // Adjust sigma dynamically
    float4 sigma = sqrt(max(float4(0, 0, 0, 0), colorVar - colorAvg * colorAvg));
    float4 colorMin = colorAvg - gColorBoxSigma * sigma;
    float4 colorMax = colorAvg + gColorBoxSigma * sigma;

    // Clamp the history buffer value to the calculated range
    historyBuffer = clamp(historyBuffer, colorMin, colorMax);

    // Blend current and clamped history colors
    float4 txaa = lerp(currentBuffer, historyBuffer, 0.95);
    return txaa;
    */

    // Calculate neighborhood statistics
    float4 colorMin = float4(1.0, 1.0, 1.0, 1.0);
    float4 colorMax = float4(0.0, 0.0, 0.0, 0.0);
    for (int i = -1; i <= 1; i++) {
        for (int j = -1; j <= 1; j++) {
            float4 neighborTexel = _MainTex[id.xy + float2(i, j)];
            colorMin = min(colorMin, neighborTexel);
            colorMax = max(colorMax, neighborTexel);
        }
    }

    // Blend with min-max of 5 taps in '+' pattern
    float4 largerMin = min(colorMin, min(_MainTex[id.xy - 2].rgba, _MainTex[id.xy + 2].rgba));
    float4 largerMax = max(colorMax, max(_MainTex[id.xy - 2].rgba, _MainTex[id.xy + 2].rgba));
    
    // Clip historical sample towards center of AABB formed by larger neighborhood
    historyBuffer = clip_aabb(largerMin.rgb, largerMax.rgb, currentBuffer, historyBuffer);

    // Edge detection
    float edgeStrength = SobelEdgeDetectionDepth(_MainTex, id.xy);
    float edgeThreshold = 0.1; // Adjust threshold as needed

    // Adjust clamping range based on edge information
    float gColorBoxSigma = lerp(0.75, 1.5, saturate(edgeStrength / edgeThreshold)); // Adjust sigma dynamically
    float4 sigma = sqrt(max(float4(0, 0, 0, 0), historyBuffer - historyBuffer * historyBuffer));
    colorMin = historyBuffer - gColorBoxSigma * sigma;
    colorMax = historyBuffer + gColorBoxSigma * sigma;

    // Clip the history buffer value to the calculated range
    historyBuffer = clip_aabb(colorMin.rgb, colorMax.rgb, currentBuffer, historyBuffer);

    // Adaptive blending
    float blendFactor = 0.95;
    float4 txaa = lerp(currentBuffer, historyBuffer, blendFactor);
    return txaa;
}



[numthreads(8,8,1)]
void PostProcessAtmo (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

     // Add clouds to background 
    float4 currentBuffer =  _MainTex[id.xy]; 

    

    // Centered normalized UV for ray marching
    float2 centeredNormalizedUV = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    float3 worldPosition = DenormalizeDepthToWorldPosition(centeredNormalizedUV, currentBuffer.a);

    float4 histBuffer =  History[id.xy]; 
    //float3 worldPosition = DenormalizeDepthToWorldPosition(centeredNormalizedUV, histBuffer.a);

    uint2 hist_id = GetReprojectionUV(worldPosition, width, height);
    hist_id = clamp(hist_id, uint2(0, 0), uint2(width - 1, height - 1));
    
    
    float4 txaa_r = Calctxaa(hist_id, id.xy, currentBuffer);
    float4 txaa_r2 = Calctxaa2(hist_id, id.xy, currentBuffer);

    //float4 txaa = Calctxaa(id.xy, id.xy, currentBuffer); 



    
    /*
    if(id.x < (width / 2)-3)
    {
        /*if(hist_id.x != id.x && hist_id.y != id.y)
        {
            Result[id.xy] = float4(0,0,1,0);
        }
        else
        {
            Result[id.xy] = txaa_r;
        }
        Result[id.xy] = txaa_r;
        
    }
    else if(id.x > (width/2) + 3)
    {
        Result[id.xy] = txaa;
    }
    else
    {
        Result[id.xy] = float4(1,0,0,1);
    }

    */

    
    //Result[id.xy] = float4(currentBuffer.rgb,1.);
    //Result[id.xy] = txaa_r;
    float4 reproject_cs_pos = mul(_CurrVP_NoFlip, float4(worldPosition, 1.0));
    float2 reproject_ss_ndc = reproject_cs_pos.xy / reproject_cs_pos.w;
    float2 reproject_ss_uv = 0.5 * reproject_ss_ndc + 0.5;

    // Determine the ss_uv for the world position in the previous frame using the previous VP matrix, this assumes the object doesnt move:
    float4 reproject_cs_pos_p = mul(_PrevVP_NoFlip, float4(worldPosition, 1.0));
    float2 reproject_ss_ndc_p = reproject_cs_pos_p.xy / reproject_cs_pos_p.w;
    float2 reproject_ss_uv_p = 0.5 * reproject_ss_ndc_p + 0.5;



    if(id.x < width / 3)
    {
        // Render one thing on the first third of the screen
        Result[id.xy] = txaa_r;
        Result[id.xy] = txaa_r2;
    }
    else if(id.x < 2 * width / 3)
    {

        // Determine the ss_uv for the world position in the previous frame using the previous VP matrix, this assumes the object doesnt move:
        

        Result[id.xy] = float4(reproject_ss_uv,0,1);
        Result[id.xy] = txaa_r2;

        // Render something else on the right half of the screen
        /*Result[id.xy] = txaa_r2;
        if(any(txaa_r -= txaa_r2))
        {
            Result[id.xy] = txaa_r2;
        }
        else
        {
            //Result[id.xy] = float4(0,1,0,1);
            Result[id.xy] = txaa_r2;
        }*/
    }
    else
    {
   


        bool anydiff = abs(float4(History[hist_id].rgb, 1.) - float4(currentBuffer.rgb, 1.)) > 0.1;
        Result[id.xy] = float4(anydiff, 0, 0, 1);
        // Render something else on the last third of the screen
        /*float currentDepth = currentBuffer.a;
        float historyDepth = History[hist_id].a;

        currentBuffer.a = 1.;

        // Depth rejection
        if (!IsDepthSimilar(currentDepth, historyDepth, 0.01)) {
            //historyBuffer = currentBuffer;
            Result[id.xy] = float4(hist_id, 0, 1);
        }
        else
        {
            Result[id.xy] = float4(hist_id, 0, 1);
        }*/
        
    }
    
    
    //Result[id.xy] = currentBuffer;

    //Result[id.xy] = currentBuffer - History[id.xy];

    //float4 difference = currentBuffer - History[id.xy];

    // Calculate the reprojected position using the previous view projection matrix
    /*float4 reproject_cs_pos_prev = mul(_PrevVP_NoFlip, float4(worldPosition, 1.0));

    // Calculate the reprojected position using the current view projection matrix
    float4 reproject_cs_pos_curr = mul(_PrevVP_NoFlip, float4(worldPosition, 1.0));*/

    // Check if the results are different
    //bool isDifferent = length(txaa_r - txaa_r ) > 0.1;

    // If the results are different, color the pixel red
    /*if (any(hist_id - id.xy))
    {
        Result[id.xy] = float4(1, 0, 0, 1);
    }
    else
    {
        Result[id.xy] = float4(0, 1, 0, 1);
    }*/
    //Result[id.xy] = GaussianBlur(id.xy);
    //Result[id.xy] = float4(worldPosition,1);
    //Result[id.xy] = float4(hist_id/ float2(width, height), 0,1);
}
